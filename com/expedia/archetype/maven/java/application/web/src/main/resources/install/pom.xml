<project 
    xmlns    ="http://maven.apache.org/POM/4.0.0" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0    http://maven.apache.org/maven-v4_0_0.xsd"
>
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>~~~{archetype.new-project.maven-group-id}.~~~{archetype.new-project.name}</groupId>
        <artifactId>~~~{archetype.new-project.name}-parent</artifactId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../parent</relativePath>
    </parent>

    <artifactId>~~~{archetype.new-project.name}-install</artifactId>
<!--  TODO revisit packaging for this module -->
    <packaging>jar</packaging>
    
    <properties>
        <!--  application install: default to dev sandbox package for developer/qa work -->
        <application.install.package>dev-sandbox</application.install.package>
        <application.install.location>${expedia.install.location}/~~~{archetype.new-project.maven-group-id-path}/${application.name}</application.install.location>
        <application.install.version.location>${application.install.location}/${project.version}</application.install.version.location>
        <application.install.current.location>${application.install.location}/current</application.install.current.location>

        <!-- sql -->
        <sql.driver>com.mysql.jdbc.Driver</sql.driver>
        <sql.url>jdbc:mysql://localhost:3306</sql.url>
        <sql.host>localhost</sql.host>
        <sql.port>3306</sql.port>
        <sql.user>root</sql.user>
        <sql.password></sql.password>
        <sql.update.version>Please provide a value for the sql.update.version property.  The value should be the name of the directory containing the update scripts you want to executes (something line 1.0-2.0).</sql.update.version>        
    </properties>

    <profiles>
        <profile>
            <id>install-package</id>
            <activation>
                <property>
                    <name>install-package</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>install-package</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <tasks>
                                        <echo />
                                        <echo>--------------------------------------------------------------------</echo>
                                        <echo>                      INSTALLING APPLICATION                        </echo>
                                        <echo>   version location: ${application.install.version.location}</echo>
                                        <echo>   current location: ${application.install.current.location}</echo>
                                        <echo>--------------------------------------------------------------------</echo>
                                        <echo />
                                        <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="maven.plugin.classpath"/>
                                        <!-- delete the "current" application version link   NOTE: we have to create the directory in the event it doesn't exist so we can fail on error (otherwise deleting the link fails because it doesn't exist) -->
                                        <mkdir dir="${application.install.current.location}" />
                                        <if>
                                            <os family="windows" />
                                            <then>
<!-- TODO windows docs recommend using rmdir to delete symlinks but this is failing, revisit - using ant delete task for now 
                                                <exec executable="rmdir" dir="${application.install.location}" >
                                                    <arg value="/Q" />
                                                    <arg value="${application.install.current.location}"  />
                                                </exec>
-->
<delete dir="${application.install.current.location}" failonerror="true" />
                                            </then>
                                            <else>
                                                <symlink link="${application.install.current.location}" resource="${application.install.version.location}" action="delete" failonerror="true" />
                                            </else>
                                        </if>
                                        
                                        <!-- delete and recreate the install directory    NOTE: we have to create the directory in the event it doesn't exist so we can fail on error (otherwise deleting the link fails because it doesn't exist) -->
                                        <echo>Cleaning install directory:         </echo>
                                        <mkdir  dir="${application.install.version.location}" />
                                        <delete dir="${application.install.version.location}" failonerror="true" includeemptydirs="true" />
                                        <mkdir  dir="${application.install.version.location}" />
                                        
                                        <!-- copy the application to the install directory -->
<!-- TODO make the war file name more specific here -->
                                        <echo>Copying application:         </echo>
<!-- TODO change the war name to not include "-web" (change this in the web module's pom) -->
                                        <copy todir="${application.install.version.location}/application" file="${basedir}/../web/target/${application.name}-web-${project.version}.war" />
                                        
                                        <!-- copy external to the install directory -->
                                        <echo>Copying external:         </echo>
                                        <copy todir="${application.install.version.location}" includeEmptyDirs="true" >
                                            <fileset dir="${basedir}/../external-resources/target/classes/package/${application.install.package}" />     
                                        </copy>
                                        
                                        <!-- make the this version of the application "current" -->
                                        <if>
                                            <os family="windows" />
                                            <then>
<!-- TODO revisit getting windows symlinks to work here, for now we just copy the version contents into curren :o
                                                <exec executable="mklink" >
                                                    <arg value="/d" />
                                                    <arg value="${application.install.current.location}" />
                                                    <arg value="${application.install.version.location}" />
                                                </exec>
-->
<echo>Using work-around for windows symlinks, copying installed version contents to current directory which adds time to the build :(         </echo>
<copy todir="${application.install.current.location}" >
            <fileset dir="${application.install.version.location}" /> 
</copy>
                                            </then>
                                            <else>
                                                <symlink link="${application.install.current.location}" resource="${application.install.version.location}" action="single" failonerror="true" />
                                            </else>
                                        </if>
                                        
                                        <echo />
                                        <echo>--------------------------------------------------------------------</echo>
                                        <echo />
                                    </tasks>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <dependencies>
        <!-- the external resources and web modules must be built before we can install -->
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>~~~{archetype.new-project.name}-external-resources</artifactId>
            <version>${project.version}</version>
        </dependency>    
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>~~~{archetype.new-project.name}-web</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
    </dependencies>
    
</project>